<div class="history">
    <div id="inspection-statistical" class="d-flex justify-content-between">
        <div id="result">
            <div class="d-flex">
                <div class="current-tray">
                    <div class="d-flex align-items-center" style="margin-bottom: 20px">
                        <span class="btn-previous-tray"> < </span>
                        <div id="title-current-tray">
                            Page <span id="number-current-tray">10</span>
                        </div>
                        <span class="btn-next-tray"> > </span>
                    </div>
                    <div class="d-flex check-item justify-content-center">
                        <div class="is-check-tray checking-tray-left">
                            <div class="title-cam text-center mb-1">Left</div>
                            <div class="ng-ok">
                                <div class="d-flex justify-content-center flex-column" id="rs-left"></div>
                            </div>
                        </div>

                        <div class="is-check-tray checking-tray-right">
                            <div class="title-cam text-center mb-1">Right</div>
                            <div class="ng-ok">
                                <div class="d-flex justify-content-center flex-column" id="rs-right"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="image">
                    <div>
                        <h3 id="position-item" class="text-center" style="font-weight: bold; font-size: 25px;margin-bottom: 5px;">Position: -</h3>
                        <h3 id="type-item-stiffiner">Area Camera</h3>

                        <div class="skeleton d-none">
                            <div class="line"></div>
                        </div>
                        
                        <div class="no-data text-center" id="no-data-area">
                            <span>No data</span><br />
                            <span>Please click to NG item to view error details</span>
                        </div>

                        <div class="error-image mt-4" id="err-image-area">
                        </div>
                    </div>
                    <div>
                        <h3 id="type-item-stiffiner" class="mt-3">Line Camera</h3>

                        <div class="skeleton d-none">
                            <div class="line"></div>
                        </div>

                        <div class="no-data text-center" id="no-data-line">
                            <span>No data</span><br />
                            <span>Please click to NG item to view error details</span>
                        </div>
                        <div class="error-image mt-4" id="err-image-line">
                            
                        </div>
                    </div>
                </div>

                <div class="info-error">
                    <h3 id="title">NG Classification</h3>

                    <div class="info">
                        <span class="information">Information</span> <br />

                        <span class="side">
                            Side: <b class="b-side text-capitalize">-</b>
                        </span>
                        <br />
                        <span class="tray-number">
                            Tray: <b class="b-tray-number">-</b>
                        </span>
                        <br />
                        <span class="result-item">
                            Result: <b class="b-result-item">-</b>
                        </span>
                    </div>

                    <div class="title-ng-detail mt-4">
                        NG details
                    </div>

                    <div>
                        <div class="title-table d-flex">
                            <div class="label-error">Error Type</div>
                            <div class="qty-error">Quantity</div>
                        </div>

                        <div class="list-error d-none">
                            @for (int i = 0; i <= 3; i++)
                            {
                                <div class="d-flex">
                                    <div class="label-error">Black Dot</div>
                                    <div class="qty-error">2</div>
                                </div>
                            }
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/okzoom-1.0.min.js"></script>

    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/historyHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start()
            .then(() => {
                console.log('Connection history established!');
            })
            .catch((err) => {
                console.error(err.toString())
            });

        connection.on("RefreshData", function () {
            location.reload();
        });

        const dataLeft = @Html.Raw(Json.Serialize(ViewBag.GroupedDataLeft));
        const dataRight = @Html.Raw(Json.Serialize(ViewBag.GroupedDataRight));

        let lengthArr = 0;
  
        if (dataLeft.length >= dataRight.length)  {
            lengthArr = dataLeft.length
        } else {
            lengthArr = dataRight.length
        }
        
        var currentTray = lengthArr;

        const MAX_TRAY = lengthArr;
        const MIN_TRAY = 1;

        var isLoading = false;

        var currentTraySelect = null;
        var currentIndexSelect = null;

        if (dataLeft.length > 0) {
            renderTrayLeft(dataLeft[0]);
        }

        if (dataRight.length > 0) {
            renderTrayRight(dataRight[0]);
        }

        $('#number-current-tray').html(lengthArr);

        function showItem(item, key) {
            let data = JSON.parse(decodeURIComponent(item))
            if (GetResult(data) == 'NG' && isLoading == false) {
                
                //set info
                $('#position-item').html('Position: ' + data.index);

                $('.b-side').html(data.side);
                $('.b-result-item').html('NG');
                $('.b-tray-number').html(data.tray);

                $('.no-data').addClass('d-none');
                $('.error-image').removeClass('d-none');
                $('.list-error').removeClass('d-none');

                isLoading = true;


                //set errors
                let arr = data.errors;

                let groupedByDescription = arr.reduce((acc, curr) => {
                    if (!acc[curr.description]) {
                        acc[curr.description] = { count: 1 };
                    } else {
                        acc[curr.description].count++;
                    }
                    return acc;
                }, {});

                let listErrs = '';

                for (const [key, value] of Object.entries(groupedByDescription)) {
                    listErrs += `
                                <div class="d-flex">
                                    <div class="label-error">${key}</div>
                                    <div class="qty-error">${value.count}</div>
                                </div>
                            `;
                }

                $('.list-error').html(listErrs);

                $('.skeleton').removeClass('d-none');
                $('#err-image-area').html('')
                $('#err-image-line').html('')

                connection.invoke("DownloadFile", data.images).then((result) => {

                    let imageArea = '';
                    let imageLine = '';

                    result.forEach(item => {

                        if (item.client_id == 1 || item.client_id == 3) {
                            imageArea += `<img src="${item.path}" style="max-width: 100%;" class="zoom-image mb-3" />`;
                        } else {
                            imageLine += `<img src="${item.path}" style="max-width: 100%;" class="zoom-image mb-3" />`;
                        }
                    });

                    if (imageArea == '') {
                        $('#err-image-area').append(`<div style="font-weight: 700;text-align: center;color: #b90000;">No image</div>`)
                    } else {
                        $('#err-image-area').append(imageArea)
                    }

                    if (imageLine == '') {
                        $('#err-image-line').append(`<div style="font-weight: 700;text-align: center;color: #b90000;">No image</div>`)
                    } else {
                        $('#err-image-line').append(imageLine)
                    }

                    $('.zoom-image').okzoom({
                        width: 420,
                        height: 180,
                        background: "#fff",
                        backgroundRepeat: "repeat",
                        shadow: "0 0 5px #000",
                        border: "1px solid black",
                        scaleFactor: 1
                    });

                    $('.skeleton').addClass('d-none');
                }).catch(function (err) {
                    $('#err-image-area').append(`<div style="font-weight: 700;text-align: center;color: #b90000;">Error can not get image!</div>`)
                    $('#err-image-line').append(`<div style="font-weight: 700;text-align: center;color: #b90000;">Error can not get image!</div>`)
                    return console.error(err.toString());
                })
                .finally(function () {
                    $('.skeleton').addClass('d-none');
                    isLoading = false;
                });
            }
        }

        function renderTrayLeft(data) {
            let rs = '';
            data.forEach(function (item, key) {
                rs += `
                    <div class="result-left-tray" onclick="showItem('${encodeURIComponent(JSON.stringify(item))}', ${key})" style="background: #E4491D">
                        <span class="position">${key + 1}</span>
                        <span class="result">
                            NG
                        </span>
                    </div>
                    `
            });
            $('#rs-left').html(rs);
        }

        function renderTrayRight(data) {
            let rs = '';
            data.forEach(function (item, key) {
                rs += `
                    <div class="result-left-tray" onclick="showItem('${encodeURIComponent(JSON.stringify(item))}', ${key})" style="background: #E4491D">
                        <span class="position">${key + 21}</span>
                        <span class="result">
                            NG
                        </span>
                    </div>
                    `
            });

            $('#rs-right').html(rs);
        }

        function GetResult(item) {
            if (item.resultArea == 1 && item.resultLine == 1) {
                return 'OK';
            }

            if (item.resultArea == 3 && item.resultLine == 3) {
                return 'Empty';
            }

            return 'NG';
        }

        $('.btn-next-tray').click(function () {
            if (currentTray >= lengthArr) {
                return false;
            }

            currentTray++;
            $('#number-current-tray').html(currentTray);



            if (dataLeft[lengthArr - currentTray] === undefined) {
                $('#rs-left').html('');
            } else {
                renderTrayLeft(dataLeft[lengthArr - currentTray]);
            }

            if (dataRight[lengthArr - currentTray] === undefined) {
                $('#rs-right').html('');
            } else {
                renderTrayRight(dataRight[lengthArr - currentTray]);
            }
        });

        $('.btn-previous-tray').click(function () {
            if (currentTray == MIN_TRAY || lengthArr == 0) {
                return;
            }

            currentTray--;
            $('#number-current-tray').html(currentTray);

            if (dataLeft[lengthArr - currentTray] === undefined) {
                $('#rs-left').html('');
            } else {
                renderTrayLeft(dataLeft[lengthArr - currentTray]);
            }

            if (dataRight[lengthArr - currentTray] === undefined) {
                $('#rs-right').html('');
            } else {
                renderTrayRight(dataRight[lengthArr - currentTray]);
            }
        });

    </script>
}